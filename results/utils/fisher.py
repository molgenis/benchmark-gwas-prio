"""
A  module that provides other modules functionality to perform the fisher exact test
specifically on results of gene prioritization methods.
"""

from dataclasses import dataclass
from pathlib import Path
from typing import Tuple
import numpy as np
import pandas as pd
from scipy import stats


@dataclass
class HPO:
    """
    Dataclass containing a HPO database.
    """
    database: Path

    def __post_init__(self) -> None:
        """
        Read in the HPO database and the HPO info.
        """
        self.hpo_data = pd.read_csv(self.database, compression='gzip', sep="\t")
        self.hpo_data.set_index('-', inplace=True)

    @staticmethod
    def get_data_hpo_term(hpo_data: pd.DataFrame,
                            hpo_term: str) -> Tuple[pd.DataFrame, pd.Series]:
        """
        Subset the entire HPO database to get the data for a
        specific HPO term. Where the columns of the HPO database are
        different HPO terms and the index consists of ensembl gene IDs.

        :parameters
        -----------
        hpo_data - pd.DataFrame
            HPO metric inside a pandas data frame
        hpo_term - str
            ID of HPO term (e.g. HP:00002)

        :returns
        --------
        data_hpo_term - pd.DataFrame
            HPO data for one HPO term
        genes - pd.Series
            List of genes for HPO term
        """
        data_hpo_term = hpo_data.loc[hpo_data[hpo_term] == 1, hpo_term]
        genes = data_hpo_term.index
        return data_hpo_term, genes


class FisherTest:
    """
    Class dedicated for performing fisher's exact test on
    data generated by gene prioritization methods.
    """

    @staticmethod
    def create_fisher_table(overlap_genes: pd.Series, gwas_genes: pd.Series,
                            hpo_genes: pd.Series) -> pd.DataFrame:
        """
        Create a 2x2 contingency table needed for fisher exact test.

        :parameters
        -----------
        overlap_genes - pd.Series
            List of genes that overlap with the HPO database and results of a prioritization method.
        gwas_genes - pd.Series
            List of significant genes
        hpo_genes - pd.Series
            List of HPO genes

        :returns
        --------
        metrix - pd.DataFrame
            2x2 contingency table
        """
        top_left = overlap_genes[~overlap_genes.isin(gwas_genes) & ~overlap_genes.isin(hpo_genes)].shape[0]
        bottom_left = overlap_genes[overlap_genes.isin(gwas_genes) & ~overlap_genes.isin(hpo_genes)].shape[0]
        top_right = overlap_genes[~overlap_genes.isin(gwas_genes) & overlap_genes.isin(hpo_genes)].shape[0]
        bottom_right = overlap_genes[overlap_genes.isin(gwas_genes) & overlap_genes.isin(hpo_genes)].shape[0]

        total = top_left + bottom_left + top_right + bottom_right

        metrix = pd.DataFrame({"No HPO": [top_left, bottom_left, top_left + bottom_left],
                                "Yes HPO": [top_right, bottom_right, top_right + bottom_right],
                        "sum": [top_left + top_right, bottom_left + bottom_right, total]})
        metrix.index = ["No GWAS", "Yes GWAS", "sum"]
        return metrix

    @staticmethod
    def fishers_exact_test(fisher_data: pd.DataFrame) -> Tuple[float, float]:
        """
        Perform the fisher's exact test on a 2x2 contingency table.

        :parameters
        -----------
        fisher_data - pd.DataFrame
            A 2x2 contingency table

        :returns
        --------
        odds_ratio - float
            Odds ratio of the fisher's exact test indicating the direction of the enrichment
            (if there is one)
        p_val - float
            P value indicating if there is a significant enrichment.
        """
        odds_ratio, p_val = stats.fisher_exact(fisher_data)
        return odds_ratio, p_val

    def perform_fisher_exact_tests(self, hpo_data: pd.DataFrame, gene_data: pd.Series,
                                    hpo_info: pd.DataFrame) -> pd.DataFrame:
        """
        Perform fisher's exact test on the intersect of the HPO genes, and
        genes produced by a gene prioritization method.

        :parameters
        -----------
        hpo_data - pd.DataFrame
            HPO metric inside a pandas data frame
        gene_data - pd.Series
            List of genes
        hpo_info - pd.DataFrame
            A data frame containing the name of the GWAS trait, Related HPO term, and HPO ID

        :returns
        --------
        hpo_scores - pd.DataFrame
            The original hpo_info data frame with some additional information:
            OR and p values from the fisher exact test and zscores from the p values.
        """
        hpo_scores = hpo_info.copy()
        odds_ratios = []
        p_values = []
        for hpo in hpo_info["HPO ID"]:

            try:
                hpo_genes = hpo_data.loc[hpo_data[hpo] == 1, hpo].index
                fisher_data = self.create_fisher_table(hpo_data.index, gene_data, hpo_genes).iloc[0:2, 0:2].values

                odds_ratio, p_val = self.fishers_exact_test(fisher_data)
            except KeyError:
                odds_ratio, p_val = np.nan, np.nan

            odds_ratios.append(odds_ratio)
            p_values.append(p_val)

        hpo_scores["OR"] = odds_ratios
        hpo_scores["pvalues"] = p_values
        zscores = stats.norm.ppf(p_values)
        hpo_scores["zscores"] = np.where(zscores == np.inf, 4, zscores)

        return hpo_scores
